/***********************************
 [트리]
 - 계층적인 자료를 나타내는데 자주 사용되는 자료구조
 - 부모노드가 여러 자식노드를 가질수 있는 1대 다 구조



[트리의 구성]
 - 부모(parent) : 루트 노드 방향으로 직접 연결된 노드
 - 자식(child) : 루트 노드 반대방향으로 직접 연결된 노드
 - 뿌리(root) : 부모노드가 없는 최상위 노드. 트리의 깊이 0에 하나만 존재
 - 가지(Branch) : 부모노드와 자식노드가 모두 있는 노드. 트리의 중간에 존재
 - 잎(Leaf) : 자식노드가 없는 노드. 트리의 끝에 존재

 //
 //             뿌리                  - 깊이 0
 //        ┌─────┼─────┐
 //       가지  가지  가지            - 깊이 1
 //  ┌─────┤     │     │
 // 가지  가지   잎   가지            - 깊이 2
 //  │     │           ├────┬────┐
 //  잎    잎         가지  잎   잎   - 깊이 3
 //                    ├────┐
 //                    잎   잎        - 깊이 4

================================================
[이진트리]
 -  부모노드가 자식노드를 최대 2개까지만 가질수 있는 트리
 -  비선형 자료구조 이기 때문에 순차적 처리를 위해 순서에 대해 규칙을 선정해야함.
 - 순회의 방식은 크게 전위, 중위, 후위 순회가 있음.
 - 전위순회(Pre-Order) : 노드, 왼쪽, 오른쪽
 - 중위순회(In-Order) : 왼쪽, 노드, 오른쪽
 - 후위순회(Post-Order) : 왼쪽, 오른쪽, 노드
        A
    ┌───┴───┐
    B       C
  ┌─┴─┐   ┌─┴─┐
  D   E   F   G

//전위순회 : A->B->D->E->C-<F->G
//중위순회 : D->B->E->A->F->C->G
//후위순회 : D->E->B->F->G->C->A
 ***********************************/




namespace _20250417
{
    internal class CTree
    {
    }
}
